$.fn.multiFiles = function (settings) {    var self = this;    //**** Параметры ****//    self._settings = $.extend({        sortable: true, // Сортировка файлов перетаскиванием        cropImage: true, // Обрезать ли изображение        fileTypes: [], // Разрешенные к загрузке типы файлов        fileTypesMessage: '' // Сообщение, выводящееся при неверном типе файла    }, settings || {});    //**** Определяем fileList и назначаем сортировку ****//    var fileList = this.find('.fileList');    if (this._settings.sortable) {        fileList.sortable({            update: function () {                var order = {};                fileList.find('.file').each(function (i) {                    order[$(this).attr('id').replace('file-', '')] = i;                });                var reqUpdate = $.extend({                    act: 'sort',                    order: JSON.stringify(order)                }, self._settings);                sendFiles('/admin/ajax/goodParams.php', reqUpdate);                fileList.find('img').resizeImg(self._settings.cropImage);            }        });    }    //**** Отображение существующих файлов ****//    sendFiles('/admin/ajax/goodParams.php', $.extend({act: 'list'}, self._settings), false, function () {        if (this) {            for (var i = 0; i < this.length; i++) {                fileList.append(this[i]);            }            fileList.find('img').resizeImg(self._settings.cropImage);        }    });    //**** Добавление ****//    var inputFile = this.find('input[type="file"]');    inputFile.change(function () {        if (!this.files.length) {            return;        }        //**** Проверка на валидность типов файлов ****//        if (self._settings.fileTypes.length) {            for (var i = 0; i < this.files.length; i++) {                if (!self._settings.fileTypes.inArray(this.files[i].type)) {                    if (self._settings.fileTypesMessage) {                        alert(self._settings.fileTypesMessage);                    }                    return;                }            }        }        sendFiles('/admin/ajax/goodParams.php', $.extend({act: 'add'}, self._settings), this.files, function () {            if (this) {                for (var i = 0; i < this.length; i++) {                    fileList.append(this[i]);                }                fileList.find('img').resizeImg(self._settings.cropImage);            }        });    });    //**** Переименование ****//    this.on('blur', 'input[type="text"]', function () {        var id = $(this).closest('.file').attr('id').replace('file-', '');        var reqRen = $.extend({            act: 'rename',            id: id,            value: $(this).val()        }, self._settings);        sendFiles('/admin/ajax/goodParams.php', reqRen);        return false;    });    //**** Удаление ****//    this.on('click', 'a.delete', function () {        var item = $(this).closest('.file');        var id = $(this).closest('.file').attr('id').replace('file-', '');        sendFiles('/admin/ajax/goodParams.php', $.extend({act: 'delete', id: id}, self._settings), false, function () {            item.remove();            fileList.find('img').resizeImg(self._settings.cropImage);        });        return false;    });};$.fn.fileman = function (settings) {    var self = this;    //**** Параметры ****//    self._settings = $.extend({        sortable: true, // Сортировка файлов перетаскиванием        cropImage: true, // Обрезать ли изображение        fileTypes: [], // Разрешенные к загрузке типы файлов        fileTypesMessage: '' // Сообщение, выводящееся при неверном типе файла    }, settings || {});    //**** Определяем fileList и назначаем сортировку ****//    var fileList = this.find('.fileList');    if (this._settings.sortable) {        fileList.sortable({            update: function () {                var order = {};                fileList.find('.file').each(function (i) {                    order[$(this).attr('id').replace('file-', '')] = i;                });                var reqUpdate = $.extend({                    act: 'sort',                    order: JSON.stringify(order)                }, self._settings);                sendFiles('/admin/ajax/goodParams.php', reqUpdate);                fileList.find('img').resizeImg(self._settings.cropImage);            }        });    }    //**** Отображение существующих файлов ****//    sendFiles('/admin/ajax/goodParams.php', $.extend({act: 'list'}, self._settings), false, function () {        if (this) {            for (var i = 0; i < this.length; i++) {                fileList.append(this[i]);            }            fileList.find('img').resizeImg(self._settings.cropImage);        }    });    //**** Добавление ****//    this.on('click', 'label', function () {        $('#roxyPanel').dialog({modal: true, width: 875, height: 600});    });    this.on('change', 'input', function () {        sendFiles('/admin/ajax/goodParams.php', $.extend({act: 'addFileman', file: $(this).attr('value')}, self._settings), false, function () {            if (this) {                for (var i = 0; i < this.length; i++) {                    fileList.append(this[i]);                }                fileList.find('img').resizeImg(self._settings.cropImage);            }        });    });    //**** Переименование ****//    this.on('blur', 'input[type="text"]', function () {        var id = $(this).closest('.file').attr('id').replace('file-', '');        var reqRen = $.extend({            act: 'rename',            id: id,            value: $(this).val()        }, self._settings);        sendFiles('/admin/ajax/goodParams.php', reqRen);        return false;    });    //**** Удаление ****//    this.on('click', 'a.delete', function () {        var item = $(this).closest('.file');        var id = $(this).closest('.file').attr('id').replace('file-', '');        sendFiles('/admin/ajax/goodParams.php', $.extend({act: 'deleteFileman', id: id}, self._settings), false, function () {            item.remove();            fileList.find('img').resizeImg(self._settings.cropImage);        });        return false;    });};function sendFiles(url, params, files, callback) {    var formData = new FormData();    if (files) {        if (!files.length) {            return false;        }        for (var i = 0; i < files.length; i++) {            formData.append(i, files[i]);        }    }    // Туда же добавляем прочие параметры    if (typeof params === 'object') {        for (var key in params) {            formData.append(key, params[key]);        }    }    // Формируем запрос    var xhr = new XMLHttpRequest();    xhr.open('POST', url, true);    xhr.send(formData);    xhr.onreadystatechange = function () {        if (xhr.readyState === 4 && xhr.status === 200 && callback) {            callback.call(eval('(' + xhr.responseText + ')'));        } else if (xhr.status === 500) {            // alert(xhr.responseText);            if (xhr.responseText) {                alert(xhr.responseText);            }            return false;        }    };}$.fn.resizeImg = function (crop) {    this.isLoaded(function () {        resize($(this));    });    function resize(img) {        var wrapper = $(img.parents()[0]);        var width = wrapper.width();        var height = wrapper.height();        var ratio = width / height;        var aRatio = img.width() / img.height();        if ((aRatio > ratio && crop) || (aRatio <= ratio && !crop)) {            img.height(height).css({                marginLeft: (width - aRatio * height) / 2,                marginTop: '',                width: ''            });        } else if ((aRatio <= ratio && crop) || (aRatio > ratio && !crop)) {            img.width(width).css({                marginTop: (height - width / aRatio) / 2,                marginLeft: '',                height: ''            });        }    }};$.fn.isLoaded = function (callback) {    function isImageLoaded(img) {        if (!img.complete) {            return false;        }        if (typeof img.naturalWidth !== "undefined" && img.naturalWidth === 0) {            return false;        }        return true;    }    return this.each(function () {        var img = $(this);        if (img.is("img") && $.isFunction(callback)) {            img.one("load", callback);            if (isImageLoaded(this)) {                img.trigger("load");            }        }    });};Array.prototype.inArray = function (p_val) {    for (var i = 0, l = this.length; i < l; i++) {        if (this[i] === p_val) {            return true;        }    }    return false;};$.fn.validate = function (reg, msg) {    this.each(function () {        if (this.nodeName !== "INPUT" && this.nodeName !== "TEXTAREA") {            return;        }        var self = $(this);        $(this).on('keyup blur change', function (event) {            if (self.val()) {                if (reg && !reg.test(self.val())) {                    self.trigger('errorValidate', [msg]);                } else {                    self.trigger('noErrorValidate');                }            } else {                if (self.hasClass('need')) {                    self.trigger('errorValidate', ['Поле не может быть пустым']);                } else {                    self.trigger('noErrorValidate');                }            }        });    });    return this;};$.fn.Form = function (settings) {    var self = this;    self._settings = $.extend({    }, settings || {});    var id_form = this.attr('id');    var inputs = 'input[form="' + id_form + '"]:not([type="file"]), textarea[form="' + id_form + '"], select[form="' + id_form + '"]';    if (!$(inputs).size()) {        return;    }    this.on('change', inputs, function (event) {        var $element = $(event.target);        self._settings.field = $element.attr('name');        var beforeVal = $element.attr('data-beforevalue') ? $element.attr('data-beforevalue') : '';        var afterVal = $element.attr('data-aftervalue') ? $element.attr('data-aftervalue') : '';        self._settings.value = beforeVal + $element.val() + afterVal;        if (($element.attr('type') === 'checkbox' || $element.attr('type') === 'radio') && !$element.prop('checked')) {            self._settings.value = 0;        }        var status = $('<span class="status"></span>').insertAfter($element);        $.post('/admin/ajax/goodParams.php', self._settings, function (data, textStatus) {            if (textStatus !== 'success') {                alert(data);            }            window.setTimeout(function () {                status.fadeOut(200, function () {                    status.addClass('ok').show().fadeOut(1000, function () {                        status.remove();                    });                });            }, 500);        });    });};function htmlentities(s) {    var div = document.createElement('div');    var text = document.createTextNode(s);    div.appendChild(text);    return div.innerHTML;}function addslashes(str) {    return (str + '').replace(/[\\"']/g, '\\$&');}function closeRoxy(id) {    $('#roxyPanel').dialog('close');    $('#' + id).change();}